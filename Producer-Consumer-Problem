#include <bits/stdc++.h>
using namespace std;

int main()
{
    // FIRST TO ATTAIN SYNCHRONISATION BETWEEN PRODUCER AND CONSUMER
    // SECOND IF THE CONTAINER IS FULLY FILLED THEN WE DONT HAVE TO AGAIN PRODUCE ANY OTHER PROCESS OR thread_local
    // THIRD IF THE CONTAINER IS EMPTY THE CONSUMER CANT CONSUME ANY PROCESS
    
    
    // Binary SEMAPHORE for mutex
    // which tells whether the lock is acquired or free
    // AND FOR THE FULL CHECK WE WILL TAKE SEMAPHORE  FROM 0 AND IF SEMAPHORE == N THAT MEANS IT IS FULL
    // FOR EMPTY CHECK WE WILL TAKE N SEMAPHORE IF SEMAPHORE BECOMES 0 THAT MEANS THE CONTAINER IS EMPTY
    
    // PRODUCER
    do{
        wait(empty); // IF EMPTY IS POSITIVE THAT MEANS THERE ARE STILL SOME BLOCKS THAT CAN BE FILLED IN THE BUFFER
        // AND IT WILL DECREMENT THE VALUE OF EMPTY
        // AND IF EMPTY IS <=0 THAT MEANS THAT THE BLOCKS ARE FULLY FILLED
        wait(mutex); // THE WAIT MUTEX WILL CHECK IF THE LOCK IS ACQUIRED OR NOT BY THE CONSUMER
        // IF THE LOCK IS 1 THAT MEANS PRODUCER CAN ACQUIRE THE LOCK AND LOCK =LOCK--;
        // AND IF THE LOCK IS 0 THE PRODUCER CANT ACCESS THE SHARED RESOURCE
        
        // ADD DATA TO BUFFER
        signal(mutex); // SIGNAL DO -> THE SIGNAL WILL INCREMENT THE LOCK=LOCK++
        signal(full); // IT WILL INCREMENT FULL; full initially 0 now becomes 1 
    }while(1);
    
    //CONSUMER
    do{
        wait(full); // IF FULL IS POSITIVE THAT MEANS CONSUMER CAN CONSUME THE DATA FROM THE BUFFER
        // AND FULL=FULL--;
        // AND IF FULL <=0 THAT MEANS THERE IS NO DATA TO BE CONSUMED FROM THE BUFFER 
        wait(mutex); // IT WILL CHECK IF THE CRITICAL IS ACQUIRED BY THE PRODUCER OR NOT
        // LOCK IS 1 BUT LOCK=LOCK-- SO LOCK=0;
        
        //CONSUME DATA FROM THE BUFFER
        signal(mutex); // LOCK -> LOCK++ ,LOCK=1
        signal(empty); // EMPTY=EMPTY++;
    }while(1);

    return 0;
}
